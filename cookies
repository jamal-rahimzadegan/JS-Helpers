class Cookie {
  set = (name: string, value: string | number, expire?: number, path?: string) => {
    if (typeof document !== 'undefined') {
      document.cookie = name + '=' + value + this.setPath(path) + this.setExpireDate(expire);
    }
  };

  setMultiple = (pairs: [{ [key: string]: any }]) => {
    if (typeof document !== 'undefined') {
      pairs.map((cookie) => {
        const { name, value, days, path } = cookie;
        this.set(name, value, days, path);
      });
    }
  };

  get = (name: string) => {
    if (typeof document !== 'undefined') {
      const targetCookie = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
      if (targetCookie) {
        return ['{', '['].some((el) => targetCookie[2].includes(el))
          ? JSON.parse(unescape(targetCookie[2]))
          : targetCookie[2];
      }
    }
  };

  getMultiple = (names: string[]) => {
    if (typeof document !== 'undefined') {
      const allCookies = this.getAll();
      let matchCookies = {};
      names.map((name) => (matchCookies[name] = allCookies[name]));
      return matchCookies;
    }
  };

  getAll = () => {
    if (typeof document !== 'undefined') {
      const formattedCookies = document.cookie.split(';');
      let allCookies = {};
      formattedCookies.map((cookie) => {
        let pair = cookie.split('=');
        allCookies[(pair[0] + '').trim()] = unescape(pair.slice(1).join('='));
      });
      return allCookies;
    }
  };

  remove = (name: string) => {
    if (typeof document !== 'undefined') {
      document.cookie = name + '=; Max-Age=-99999999;';
    }
  };

  removeMultiple = (names: string[]) => {
    if (typeof document !== 'undefined') {
      names.map((name) => this.remove(name));
    }
  };

  removeAll = () => {
    if (typeof document !== 'undefined') {
      const allCookies = document.cookie.split(';');
      allCookies.map((cookieItem) => this.remove(cookieItem.split('=')[0]));
    }
  };

  private setPath = (cookiePath: string) => {
    return `;path=${cookiePath || '/'}`;
  };

  private setExpireDate = (expire: number = 365) => {
    let date = new Date();
    date.setTime(date.getTime() + 24 * 60 * 60 * 1000 * expire);
    return ';expires=' + date.toUTCString();
  };
}

export default new Cookie();
